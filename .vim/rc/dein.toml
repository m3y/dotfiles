[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
    if dein#util#_is_windows()
        let cmd = 'tools\\update-dll-mingw'
    elseif dein#util#_is_cygwin()
        let cmd = 'make -f make_cygwin.mak'
    elseif executable('gmake')
        let cmd = 'gmake'
    else
        let cmd = 'make'
    endif
    let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/vimshell'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    " quickrun
    augroup QuickRunPHPUnit
        autocmd!
        autocmd BufWinEnter,BufNewFile *Test.php set filetype=phpunit
    augroup END

    let g:quickrun_config = {
                \   "_" : {
                \       "runner": "vimproc",
                \       "runner/vimproc/updatetime": 60,
                \       "outputter": "multi:buffer:quickfix",
                \       "outputter/buffer/split": ":botright 8sp",
                \       "outputter/buffer/append": 1,
                \       "outputter/buffer/into": 0
                \   },
                \   "phpunit": {
                \       "command": "./vendor/bin/phpunit",
                \       "exec": '%c %o %s'
                \   }
                \}
'''

[[plugins]]
repo = 'tpope/vim-markdown'

[[plugins]]
repo = 'tsaleh/vim-align'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
    augroup SolarizedColorscheme
        autocmd!
    augroup END

    syntax enable
    set background=dark
    autocmd SolarizedColorscheme VimEnter * nested colorscheme solarized
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    augroup NerdtreeSettingGroup
        autocmd!
    augroup END

    let NERDTreeShowHidden = 1
    let file_name = expand("%")
    if has('vim_starting') && file_name == ""
        autocmd NerdtreeSettingGroup VimEnter * NERDTree ./
    endif
    nnoremap <silent> <C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'StanAngeloff/php.vim'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
          \ 'colorscheme': 'solarized',
          \ 'mode_map': { 'c': 'NORMAL' },
          \ 'active': {
          \   'left': [['mode', 'paste'], ['fugitive', 'filename']],
          \ },
          \ 'component': {
          \   'lineinfo': '%3l:%-2v',
          \ },
          \ 'component_function': {
          \   'modified': 'MyModified',
          \   'readonly': 'MyReadonly',
          \   'fugitive': 'MyFugitive',
          \   'filename': 'MyFilename',
          \   'fileformat': 'MyFileformat',
          \   'filetype': 'MyFiletype',
          \   'fileencoding': 'MyFileencoding',
          \   'mode': 'MyMode',
          \ },
          \ 'separator': { 'left': '', 'right': '' },
          \ 'subseparator': { 'left': '|', 'right': '|' }
          \ }

    function! MyModified()
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! MyReadonly()
        return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '' : ''
    endfunction

    function! MyFilename()
        return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
           \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
           \  &ft == 'unite' ? unite#get_status_string() :
           \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
           \ '' != expand('%t') ? expand('%t') : '[No Name]') .
           \ ('' != MyModified() ? ' ' . MyModified() : '')
    endfunction

    function! MyFugitive()
        return &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head') && len(fugitive#head()) ? ''.fugitive#head() : ''
    endfunction

    function! MyFileformat()
        return winwidth('.') > 70 ? &fileformat : ''
    endfunction

    function! MyFiletype()
        return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! MyFileencoding()
        return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! MyMode()
        return winwidth('.') > 60 ? lightline#mode() : ''
    endfunction
'''

[[plugins]]
repo = 'gregsexton/gitv'

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
    " taglist
    "let Tlist_Ctags_Cmd = "/usr/bin/ctags"
    let Tlist_Show_One_File = 1
    let Tlist_Use_Right_Window = 1
    let Tlist_Exit_OnlyWindow = 1
    let Tlist_Enable_Fold_Column = 1
    let Tlist_Auto_Open = 0
    let Tlist_Auto_Update = 1
    let Tlist_WinWidth = 30
    map <silent> <C-l> :TlistToggle<CR>
'''

[[plugins]]
repo = 'yuki777/encode.vim'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
    let g:syntastic_enable_signs = 1 " 構文エラー行に「>>」を表示
    let g:syntastic_always_populate_loc_list = 1 " 他のVimプラグインと競合するのを防ぐ
    let g:syntastic_auto_loc_list = 0 " 構文エラーリストを非表示
    let g:syntastic_check_on_open = 1 " ファイルを開いた際に構文エラーチェックを実行
    let g:syntastic_check_on_wq = 1 " wq で終了する際に構文エラーチェックを実行
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
    let g:rustfmt_autosave = 1
    let g:rustfmt_command = '$HOME/.cargo/bin/rustfmt'
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
hook_add = '''
    set hidden
    let g:racer_cmd = '$HOME/.cargo/bin/racer'
    let $RUST_SRC_PATH="/Users/m3y/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src"
'''

[[plugins]]
repo = 'fatih/vim-go'
